# Non-terminals
PROGRAM
ENTRY
STATEMENT_LIST
STATEMENT
DECLARATION
ASSIGNMENT
INPUT
OUTPUT
IF_STATEMENT
UNTIL_STATEMENT
FOR_STATEMENT
STOP_STATEMENT
CONDITION
EXPRESSION
TERM
FACTOR
ARRAY_ACCESS
ARRAY_SIZE
TYPE
IDENTIFIER
NUMBER
BOOLEAN_VALUE
OPERATOR
RELATIONAL_OP
$
# Terminals
entry
~
num
boolean
is
if
else
until
for
stop
input
output
>>
<<
[
]
{
}
,
plus
minus
mult
div
mod
gt
lt
gte
lte
eq
neq
and
or
true
false
:
$
# Start symbol
PROGRAM
$
# Productions
PROGRAM -> ENTRY
ENTRY -> entry ~ STATEMENT_LIST ~
STATEMENT_LIST -> STATEMENT STATEMENT_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> DECLARATION :
STATEMENT -> ASSIGNMENT :
STATEMENT -> INPUT :
STATEMENT -> OUTPUT :
STATEMENT -> IF_STATEMENT
STATEMENT -> UNTIL_STATEMENT
STATEMENT -> FOR_STATEMENT
STATEMENT -> STOP_STATEMENT :
DECLARATION -> TYPE IDENTIFIER
DECLARATION -> TYPE IDENTIFIER is EXPRESSION
DECLARATION -> TYPE IDENTIFIER { NUMBER }
TYPE -> num
TYPE -> boolean
ASSIGNMENT -> IDENTIFIER is EXPRESSION
INPUT -> input >> IDENTIFIER
OUTPUT -> output << EXPRESSION
IF_STATEMENT -> if [ CONDITION ] ~ STATEMENT_LIST ~
IF_STATEMENT -> if [ CONDITION ] ~ STATEMENT_LIST ~ else ~ STATEMENT_LIST ~
UNTIL_STATEMENT -> until [ CONDITION ] ~ STATEMENT_LIST ~
FOR_STATEMENT -> for [ IDENTIFIER , EXPRESSION , EXPRESSION , EXPRESSION ] ~ STATEMENT_LIST ~
STOP_STATEMENT -> stop
CONDITION -> EXPRESSION RELATIONAL_OP EXPRESSION
EXPRESSION -> TERM
EXPRESSION -> EXPRESSION plus TERM
EXPRESSION -> EXPRESSION minus TERM
TERM -> FACTOR
TERM -> TERM mult FACTOR
TERM -> TERM div FACTOR
TERM -> TERM mod FACTOR
FACTOR -> IDENTIFIER
FACTOR -> NUMBER
FACTOR -> BOOLEAN_VALUE
FACTOR -> ARRAY_ACCESS
ARRAY_ACCESS -> IDENTIFIER { EXPRESSION }
RELATIONAL_OP -> gt
RELATIONAL_OP -> lt
RELATIONAL_OP -> gte
RELATIONAL_OP -> lte
RELATIONAL_OP -> eq
RELATIONAL_OP -> neq
BOOLEAN_VALUE -> true
BOOLEAN_VALUE -> false